{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9d64b733-e0a8-4a6c-98bf-23f2d2587bf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a word:  alphabetical soup\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sorted word in alphabetical order:   aaabcehilloppstu\n"
     ]
    }
   ],
   "source": [
    "#ALPHABETICAL SOUP PROBLEM\n",
    "\n",
    "def sort_string(input_string):\n",
    "    return ''.join(sorted(input_string))\n",
    "\n",
    "#Ask user to input a word\n",
    "user_input=input(\"Enter a word: \")\n",
    "\n",
    "#This function will sort the word in alphabetical order that the user input\n",
    "sorted_word=sort_string(user_input)\n",
    "\n",
    "print(\"Sorted word in alphabetical order: \", sorted_word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f5a873b-8317-48dc-ba4f-3aa575fb3c1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Construct a sentence to replace the words with corresponding emoticons:  Make me smile\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentence using emoticons:  Make me :)\n"
     ]
    }
   ],
   "source": [
    "#EMOTICON SOUP PROBLEM\n",
    "\n",
    "def emoticon(text):\n",
    "\n",
    "    #This function will replace the following words into emoticons\n",
    "    text = text.replace(\"smile\", \":)\")\n",
    "    text = text.replace(\"grin\", \":D\")\n",
    "    text = text.replace(\"sad\", \":((\")\n",
    "    text = text.replace(\"mad\", \">:(\")\n",
    "\n",
    "    return text\n",
    "\n",
    "#Ask user to input a sentence \n",
    "user_sentence=input(\"Construct a sentence to replace the words with corresponding emoticons: \")\n",
    "\n",
    "#This function will replace the words with emoticons and display the output\n",
    "result_sentence=emoticon(user_sentence)\n",
    "\n",
    "print(\"Sentence using emoticons: \", result_sentence) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "414551b8-c8b2-437d-9e40-f12f244d410f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a list of variable seperated by spaces:  1 2 3 4 5 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First Element:  1\n",
      "Middle Element:  [2, 3, 4, 5]\n",
      "Last Element:  6\n"
     ]
    }
   ],
   "source": [
    "#UNPACKING LIST PROBLEM\n",
    "    \n",
    "#Ask user to input variablle\n",
    "user_input=input(\"Enter a list of variable seperated by spaces: \")\n",
    "\n",
    "number_list=list(map(int, user_input.split()))\n",
    "\n",
    "#This function will make sure the list have at least three elements to have a first, middle, and last\n",
    "if len(number_list) >= 3:\n",
    "        first, *middle, last=number_list\n",
    "        print(\"First Element: \", first)\n",
    "        print(\"Middle Element: \", middle)\n",
    "        print(\"Last Element: \", last)\n",
    "else:\n",
    "        print(\"The list must have at least three elements.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a984ff9-dc04-4156-8ec0-d71aa3109420",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
